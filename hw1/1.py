import numpy as npimport pandas as pdimport matplotlib.pyplot as pltimport scipy.stats as stplt.style.use('ggplot')df = pd.read_csv("CoffeePrice.csv", header = None)df.columns = ["month", "price"]month = df.monthprice = df.pricefig, ax = plt.subplots(figsize= (10,6))ax.plot(month, price, label = "Coffee Price")ax.legend()plt.show()def MAE(sales, forecast):    forecast_delay = len(sales) - len(forecast)    return np.sum(abs(forecast-sales[forecast_delay:]))def MAPE(sales, forecast):    forecast_delay = len(sales) - len(forecast)    return np.sum(abs(forecast-sales[forecast_delay:]) / sales) / (len(forecast))def RMSE(sales, forecast):    forecast = forecast    forecast_delay = len(sales) - len(forecast)    return ((np.sum((forecast-sales[forecast_delay:])**2)) / len(forecast)) ** 0.5naive_forecast = np.array([price[i-1] for i in range(1,len(price))])print()print("Naive Forecast MAE from 1991 to 2020:", MAE(price[12:372], naive_forecast[11:371]))print("Naive Forecast MAPE from 1991 to 2020:", MAPE(price[12:372], naive_forecast[11:371]))print("Naive Forecast RMSE from 1991 to 2020:", RMSE(price[12:372], naive_forecast[11:371]))five_ma_forecast = np.array([(price[i-5]+price[i-4]+price[i-3]                              +price[i-2]+price[i-1])/5                              for i in range(5,len(price))])print()print("Five MA Forecast MAE from 1991 to 2020:", MAE(price[12:372], five_ma_forecast[7:367]))print("Five MA Forecast MAPE from 1991 to 2020:", MAPE(price[12:372], five_ma_forecast[7:367]))print("Five MA Forecast RMSE from 1991 to 2020:", RMSE(price[12:372], five_ma_forecast[7:367]))confidence = 0.95difference = st.norm.ppf((1+confidence)/2) * RMSE(price[12:372], five_ma_forecast[7:367])five_ma_forecast_lower = five_ma_forecast - differencefive_ma_forecast_upper = five_ma_forecast + differencefig, ax = plt.subplots(figsize= (10,6))ax.plot(month[372:384], five_ma_forecast_lower[367:379], label = "lower bound")ax.plot(month[372:384], five_ma_forecast_upper[367:379], label = "upper bound")ax.plot(month[372:384], price[372:384], label = "real price")ax.legend()ax.set_title("five moving average forecast pred intervals in 2021")plt.show()def es_smoothing(sales, forecast, alpha, i):    return alpha * sales[i-1] + (1-alpha) * forecast[i-1]def es_smoothing_iterator(sales, forecast, alpha):    for i in range(1,len(sales)):        forecast[i] = es_smoothing(sales,forecast,alpha,i)    return forecast[1:]es_RMSE = {}for j in range(10):    alpha = 0.1*(j+1)    es_forecast = np.zeros(len(price))    es_forecast[0] = price[0]    es_forecast = es_smoothing_iterator(price, es_forecast, alpha)    es_RMSE[alpha] = RMSE(price, es_forecast[:360])    es_RMSE = {k: v for k, v in sorted(es_RMSE.items(), key=lambda item: item[1])}es_forecast = np.zeros(len(price))es_forecast[0] = price[0]es_forecast = es_smoothing_iterator(price, es_forecast, list(es_RMSE.keys())[0])print()print("ES Forecast MAE from 1991 to 2020:", MAE(price[12:372], es_forecast[11:371]))print("ES Forecast MAPE from 1991 to 2020:", MAPE(price[12:372], es_forecast[11:371]))print("ES Forecast RMSE from 1991 to 2020:", RMSE(price[12:372], es_forecast[11:371]))difference = st.norm.ppf((1+confidence)/2) * RMSE(price[12:372], es_forecast[11:371])es_forecast_lower = es_forecast - differencees_forecast_upper = es_forecast + differencefig, ax = plt.subplots(figsize= (10,6))ax.plot(month[372:384], es_forecast_lower[371:383], label = "lower bound")ax.plot(month[372:384], es_forecast_upper[371:383], label = "upper bound")ax.plot(month[372:384], price[372:384], label = "real price")ax.legend()ax.set_title("es forecast pred intervals in 2021")plt.show()naive_forecast_with_trend = np.array([price[i-1]+price[i-2]price[i-3] for i in range(3,len(price))])print()print("Naive Forecast with trend MAE from 1991 to 2020:", MAE(price[12:372], naive_forecast_with_trend[9:369]))print("Naive Forecast with trend MAPE from 1991 to 2020:", MAPE(price[12:372], naive_forecast_with_trend[9:369]))print("Naive Forecast with trend RMSE from 1991 to 2020:", RMSE(price[12:372], naive_forecast_with_trend[9:369]))difference = st.norm.ppf((1+confidence)/2) * RMSE(price[12:372], naive_forecast_with_trend[9:369])naive_forecast_with_trend_lower = naive_forecast_with_trend - differencenaive_forecast_with_trend_upper = naive_forecast_with_trend + differencefig, ax = plt.subplots(figsize= (10,6))ax.plot(month[372:384], naive_forecast_with_trend_lower[369:381], label = "lower bound")ax.plot(month[372:384], naive_forecast_with_trend_upper[369:381], label = "upper bound")ax.plot(month[372:384], price[372:384], label = "real price")ax.legend()ax.set_title("naive forecast with trend pred intervals in 2021")plt.show()def double_es_smoothing(sales, forecast, G, alpha, beta, i, k):    return alpha * sales[i-1] + (1-alpha) * forecast[i-1] + (k+1) * G[i-1]def double_es_smoothing_iterator(sales, forecast, G, alpha, beta, k):    for i in range(1,len(sales)):        forecast[i] = double_es_smoothing(sales,forecast,G,alpha,beta,i,k)        G[i] = beta * (forecast[i] - forecast[i-1]) + (1-beta) * G[i-1]    return forecast[1:]double_es_forecast = np.zeros(len(price))double_es_forecast[0] = price[0]double_es_forecast[1] = price[1]G = np.zeros(len(price))G[0] = double_es_forecast[1] - double_es_forecast[0]double_es_forecast = double_es_smoothing_iterator(price,                                                   double_es_forecast,                                                   G,                                                   0.7,                                                   0.2,                                                  0)difference = st.norm.ppf((1+confidence)/2) * RMSE(price[12:372], double_es_forecast[6:366])double_es_forecast_lower = double_es_forecast - differencedouble_es_forecast_upper = double_es_forecast + differenceprint()print("Double ES Forecast MAE from 1991 to 2020:", MAE(price[12:372], double_es_forecast[10:370]))print("Double ES Forecast MAPE from 1991 to 2020:", MAPE(price[12:372], double_es_forecast[10:370]))print("Double ES Forecast RMSE from 1991 to 2020:", RMSE(price[12:372], double_es_forecast[10:370]))difference = st.norm.ppf((1+confidence)/2) * RMSE(price[12:372], double_es_forecast[10:370])double_es_forecast_lower = double_es_forecast - differencedouble_es_forecast_upper = double_es_forecast + differencefig, ax = plt.subplots(figsize= (10,6))ax.plot(month[372:384], double_es_forecast_lower[370:382], label = "lower bound")ax.plot(month[372:384], double_es_forecast_upper[370:382], label = "upper bound")ax.plot(month[372:384], price[372:384], label = "real price")ax.legend()ax.set_title("double es forecast pred intervals in 2021")plt.show()double_es_RMSE = {}for i in range(10):    for j in range(10):        alpha = 0.1*(i+1)        beta = 0.1*(j+1)        double_es_forecast = np.zeros(len(price))        double_es_forecast[0] = price[0]        double_es_forecast[1] = price[1]        G = np.zeros(len(price))        G[0] = double_es_forecast[1] - double_es_forecast[0]        double_es_forecast = double_es_smoothing_iterator(price,                                                           double_es_forecast,                                                           G,                                                           alpha,                                                           beta,                                                          6)        double_es_RMSE[(alpha,beta)] = RMSE(price[12:372], double_es_forecast[5:365])        double_es_RMSE = {k: v for k, v in sorted(double_es_RMSE.items(), key=lambda item: item[1])}double_es_forecast = np.zeros(len(price))double_es_forecast[0] = price[0]double_es_forecast[1] = price[1]G = np.zeros(len(price))G[0] = double_es_forecast[1] - double_es_forecast[0]double_es_forecast = double_es_smoothing_iterator(price,                                                   double_es_forecast,                                                   G,                                                   list(double_es_RMSE.keys())[0][0],                                                   list(double_es_RMSE.keys())[0][1],                                                  6)jan21_jun22_forecast = double_es_forecast[365:383]print()print("Double ES 6 month ahead Forecast MAE from 1991 to 2020:", MAE(price[12:372], double_es_forecast[5:365]))print("Double ES 6 month ahead Forecast MAPE from 1991 to 2020:", MAPE(price[12:372], double_es_forecast[5:365]))print("Double ES 6 month ahead Forecast RMSE from 1991 to 2020:", RMSE(price[12:372], double_es_forecast[5:365]))